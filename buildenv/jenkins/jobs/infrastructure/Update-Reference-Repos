/*******************************************************************************
 * Copyright (c) 2018, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
            pipelineTriggers([cron('''@weekly''')])])

def refresh(NODE, DIR, REPOS) {
    dir("${DIR}") {
        stage("${NODE} - Config") {
            sh 'git init --bare'
            REPOS.each { REPO ->
                config(REPO.name, REPO.url)
            }
        }
        stage("${NODE} - Fetch") {
            sh 'git fetch --all'
        }
    }
}

def config(NAME, URL) {
    sh "git config remote.${NAME}.url ${URL}"
    sh "git config remote.${NAME}.fetch +refs/heads/*:refs/remotes/${NAME}/*"
}

LABEL = params.LABEL
if (!LABEL) {
    LABEL = 'worker'
}

timeout(time: 3, unit: 'HOURS') {
    timestamps {
        try {
            def REPOS = []
            node('${LABEL}') {
                try {
                    checkout scm
                    def variableFile = load 'buildenv/jenkins/common/variables-functions'
                    variableFile.parse_variables_file()
                } finally {
                    cleanWs()
                }
            }
            
            REPOS_OBJ = VARIABLES.openjdk
            for (version in REPOS_OBJ) {
                prinln version
            }
            return
            REPOS.add([ name : 'jdk8', url: 'https://github.com/ibmruntimes/openj9-openjdk-jdk8.git' ])
            REPOS.add([ name : 'jdk11', url: 'https://github.com/ibmruntimes/openj9-openjdk-jdk11.git' ])
            REPOS.add([ name : 'jdk', url: 'https://github.com/ibmruntimes/openj9-openjdk-jdk.git' ])
            
            // As of right now, all machines us this path to cache
            // Windows, z/OS, Mac may be different
            def DIR = '/home/jenkins/openjdk_cache'
                            
            def JOBS = [:]
            
            // ALL_NODES is defined as a global jenkins variable
            ALL_NODES_ARRAY = ALL_NODES.split(' ')
            ALL_NODES_ARRAY.each { NODE ->
                JOBS["${NODE}"] = {
                    node("${NODE}"){
                        if (NODE_LABELS.contains('win')){
                            sh 'bash ~/openjdk_repo_updater.sh'
                        } else {
                            refresh(NODE, DIR, REPOS)
                        }
                    }
                }
            }
            parallel JOBS
        } catch(e) {
            //slackSend channel: '#jenkins', color: 'danger', message: "Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            throw e
        }
    }
}
